/*! Built with http://stenciljs.com */
const{h:e}=window.intl;import{a as t,b as s}from"./chunk-b900dc0c.js";class r{constructor(){this.hasWarned=!1,this.dicts=new Map,this.requests=new Map}async langChanged(){this.triggerLocaleChange(),await this.setDirFromDict()}dirChanged(e,t){console.log({newValue:e,oldValue:t}),this.dir.match(/ltr|rtl|auto/g)||(this.dir="auto"),this.triggerLocaleChange()}triggerLocaleChange(){const{lang:e,dir:t}=this;this.onIntlChange.emit({dir:t,locale:e})}async componentWillLoad(){if(this.dicts=new Map,this.addMO(),this.lang||(this.lang=t.get()),this.dir||(this.dir=s.get()),!this.src)throw new Error("<intl-dictionary> requires a `src` attribute. Did you forget to include an <intl-dictionary> element in your app root?");await this.fetchDictionary()}componentDidUnload(){this.removeMO()}async exists(e){try{const t=new Headers;return fetch(e,{method:"GET",headers:t}).then(e=>{const{status:t,url:s,headers:r}=e;if(200!==t)return!1;const i=r.get("content-type");return!(!i||!i.includes("application/json"))&&s})}catch(e){return Promise.resolve(!1)}}isFile(e){const t=`${this.src.replace(/\/$/,"")}/${e}.json`;return this.exists(t)}isDirWithIndex(e){const t=`${this.src.replace(/\/$/,"")}/${e}/index.json`;return this.exists(t)}async getResourceUrl(e){let t=!1;try{(t=await this.isFile(e))||this.hasWarned||(console.log(...["%cINTL","background: #ffc107; color: white; padding: 2px 4px; border-radius: 2px; font-size: 0.9em;"],'Getting a "404 (Not Found)" error?\n      You can safely ignore it! ðŸ‘‰ https://intljs.com/faq#404'),this.hasWarned=!0),t||(t=await this.isDirWithIndex(e))}catch(e){}return Promise.resolve(t)}async fetchGlobal(){try{const e=`${this.src.replace(/\/$/,"")}/index.json`,t=fetch(e).then(e=>e.json()).then(e=>this.global=e).then(()=>{this.requests.delete("global")});return this.requests.set("global",t),this.requests.get("global")}catch(e){return Promise.resolve()}}async addDictionary(e,t){this.dicts.set(e,t)}async appendToDictionary(e,t,s){const r=new Map(this.dicts.get(e)).set(t,s);this.dicts.set(e,r)}async fetchDictionary(e=this.lang){try{if(this.requests.has(e))return this.requests.get(e);{const t=this.getResourceUrl(e).then(e=>{if(!e)throw new Error;return fetch(e)}).then(e=>e.json()).then(e=>this.jsonToDict(e)).then(t=>this.addDictionary(e,t)).then(()=>{this.requests.delete(e)}).catch(()=>{this.requests.delete(e)});return this.requests.set(e,t),this.requests.get(e)}}catch(e){}}async lazyloadRef(e,t,s=this.lang){try{const r=e.url.trim().replace(/^\//,"").replace(/\:lang/g,s);if(!r.endsWith(".json"))return void console.error(`Unable to lazyload "${t}" because it is not a .json file`);const i=`${this.src.replace(/\/$/,"")}/${r}`;if(this.requests.has(i))return this.requests.get(i);{const e=fetch(i).then(e=>e.json()).then(e=>this.appendToDictionary(s,t,e)).then(()=>{this.requests.delete(i)}).catch(()=>{this.requests.delete(i)});return this.requests.set(i,e),this.requests.get(s)}}catch(e){}}async resolvePhrase(e,t=this.lang){this.dicts.has(t)||await this.fetchDictionary(t);const s=this.dicts.get(t),[r,...i]=e.split(".").map(e=>e.trim()).filter(e=>e);if(s&&s.has(r)){const a=s.get(r);if("object"==typeof a&&a.lazy)return await this.lazyloadRef(a,r,t),this.resolvePhrase(e,t);if(i.length){let e=i.reduce((e,t)=>e[t],s.get(r));return"object"==typeof a&&"string"==typeof e&&e}return"string"==typeof a&&a}return console.error(`Unable to resolve phrase "${e}" for "${t}"`),!1}async jsonToDict(e){this.global||await this.fetchGlobal();const t=this.global?Object.entries(this.global):[],s=Object.entries(e);return new Map([...t,...s])}addMO(){"MutationObserver"in window&&(this.removeMO(),this.mo=new MutationObserver(e=>{"lang"===e[0].attributeName&&(this.lang=t.get()),"dir"===e[0].attributeName&&(this.dir=s.get())}),this.mo.observe(document.documentElement,{attributes:!0,attributeFilter:["lang","dir"]}))}removeMO(){this.mo&&(this.mo.disconnect(),this.mo=void 0)}async setDirFromDict(){if(this.requests.has(this.lang)&&await this.requests.get(this.lang),this.dicts.has(this.lang)){const e=this.dicts.get(this.lang).get("dir");e&&"string"==typeof e&&/ltr|rtl|auto/g.test(e)&&this.dir!==e&&s.set(e)}}static get is(){return"intl-dictionary"}static get encapsulation(){return"shadow"}static get properties(){return{dir:{type:String,attr:"dir",mutable:!0,watchCallbacks:["dirChanged"]},element:{elementRef:!0},global:{state:!0},lang:{type:String,attr:"lang",mutable:!0,watchCallbacks:["langChanged"]},resolvePhrase:{method:!0},src:{type:String,attr:"src"}}}static get events(){return[{name:"intlChange",method:"onIntlChange",bubbles:!0,cancelable:!0,composed:!0}]}static get style(){return".sc-intl-dictionary-h{display:none}"}}class i{constructor(){this.inGroup=!1,this.value="",this.error="",this.resolvedName="",this.lazy=!0}async nameChanged(){await this.resolveName(),this.addIO()}replaceChanged(){switch(typeof this.replace){case"string":try{const e=JSON.parse(this.replace);this.replacements=new Map(Object.entries(e))}catch(e){throw new Error('Invalid value for "replace" in <intl-phrase>. "replace" must either be an object or a valid JSON string.')}break;case"object":this.replacements=new Map(Object.entries(this.replace));break;default:throw new Error('Invalid value for "replace" in <intl-phrase>. "replace" must either be an object or a valid JSON string.')}}langChangeHandler(){this.addIO()}async componentWillLoad(){this.addIO(),this.replace&&this.replaceChanged(),await this.resolveName()}componentWillUnload(){this.removeIO()}async resolveName(){return new Promise(e=>{const t=this.element.parentElement.closest("intl-phrase-group");t?(this.inGroup=!0,this.resolvedName=`${t.name}.${this.name}`,e()):(this.resolvedName=this.name,e())})}async resolveValue(){const{resolvedName:e,lang:t}=this,s=await this.dict.componentOnReady(),r=this.replaceValue(await s.resolvePhrase(e,t));!1!==r&&void 0!==r?this.value=r:this.error=this.name}replaceValue(e){return!1===e?e:e.replace(/{{\s*([^}}\s]*)\s*}}/g,(e,t)=>this.replacements.has(t)?this.replacements.get(t).toString():e)}addIO(){void 0!==this.name&&("IntersectionObserver"in window?(this.io=new IntersectionObserver(e=>{e[0].isIntersecting&&this.resolveValue().then(()=>{this.removeIO()})}),this.io.observe(this.element)):setTimeout(()=>this.resolveValue(),200))}removeIO(){this.io&&(this.io.disconnect(),this.io=void 0)}hostData(){return{style:{color:""!==this.error?"red":null}}}render(){return this.value?e("ins",{style:{textDecoration:"inherit"},innerHTML:this.value}):this.error}static get is(){return"intl-phrase"}static get properties(){return{dict:{connect:"intl-dictionary"},element:{elementRef:!0},error:{state:!0},inGroup:{state:!0},lang:{type:String,attr:"lang",mutable:!0},lazy:{type:Boolean,attr:"lazy"},name:{type:String,attr:"name",watchCallbacks:["nameChanged"]},replace:{type:String,attr:"replace",watchCallbacks:["replaceChanged"]},replacements:{state:!0},resolvedName:{state:!0},value:{state:!0}}}static get listeners(){return[{name:"document:intlChange",method:"langChangeHandler"}]}}export{r as IntlDictionary,i as IntlPhrase};