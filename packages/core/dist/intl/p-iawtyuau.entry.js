import{r as t,d as i,c as s}from"./p-81aeffb6.js";import{l as e}from"./p-e5319bb7.js";import{d as o}from"./p-277431f2.js";const n=class{constructor(s){t(this,s),this.hasWarned=!1,this.dicts=new Map,this.requests=new Map,this.default="en",this.onIntlChange=i(this,"intlChange",7)}async langChanged(){this.triggerLocaleChange(),await this.setDirFromDict()}dirChanged(){this.dir.match(/ltr|rtl|auto/g)||(this.dir="auto"),this.triggerLocaleChange()}triggerLocaleChange(){const{locale:t,dir:i}=this;try{localStorage.setItem("locale",t)}catch(s){console.error("Error accessing localStorage. Selected language not stored.")}this.onIntlChange.emit({dir:i,locale:t})}async componentWillLoad(){var t,i,s;if(this.dicts=new Map,this.addMO(),!this.locale){try{this.locale=localStorage.getItem("locale")}catch(n){console.error("Local Storage is not accessible. Not storing the language there.")}if(!this.locale){const e=(null===(t=window)||void 0===t?void 0:t.navigator.languages)||[(null===(i=window)||void 0===i?void 0:i.navigator).userLanguage||(null===(s=window)||void 0===s?void 0:s.navigator.language)||this.default];console.log("locales",this.locales);const o=this.locales.replace(" ","").split(",");for(let t=0;t<e.length;t+=1){if(o.includes(e[t])){this.locale=e[t];break}const i=o.find(i=>e[t].startsWith(i));if(i){this.locale=i;break}}}this.locale||(this.locale=this.default)}if(this.dir||(this.dir=o.get()),e.set(this.locale),!this.src)throw new Error("<intl-dictionary> requires a `src` attribute. Did you forget to include an <intl-dictionary> element in your app root?");await this.fetchDictionary()}componentDidUnload(){this.removeMO()}async exists(t){try{const i=new Headers;return fetch(t,{method:"GET",headers:i}).then(i=>{const{status:s,url:e,headers:o}=i;if(console.log("fetch response",t,s,e,o),200!==s)return!1;const n=o.get("content-type");return!(!n||!n.includes("application/json"))&&e})}catch(i){return Promise.resolve(!1)}}isFile(t){const i=`${this.src.replace(/\/$/,"")}/${t}.json`;return this.exists(i)}isDirWithIndex(t){const i=`${this.src.replace(/\/$/,"")}/${t}/index.json`;return this.exists(i)}async getResourceUrl(t){let i=!1;try{i=await this.isFile(t),i||this.hasWarned||(console.log("%cINTL","background: #ffc107; color: white; padding: 2px 4px; border-radius: 2px; font-size: 0.9em;",'Getting a "404 (Not Found)" error?\n      You can safely ignore it! ðŸ‘‰ https://intljs.com/faq#404'),this.hasWarned=!0),i||(i=await this.isDirWithIndex(t))}catch(s){}return Promise.resolve(i)}async fetchGlobal(){try{const t=`${this.src.replace(/\/$/,"")}/index.json`,i=fetch(t).then(t=>t.json()).then(t=>this.global=t).then(()=>{this.requests.delete("global")});return this.requests.set("global",i),this.requests.get("global")}catch(t){return Promise.resolve()}}async addDictionary(t,i){this.dicts.set(t,i)}async appendToDictionary(t,i,s){const e=new Map(this.dicts.get(t)).set(i,s);this.dicts.set(t,e)}async fetchDictionary(t=this.locale){try{if(this.requests.has(t))return this.requests.get(t);{const i=this.getResourceUrl(t).then(t=>{if(!t)throw new Error;return fetch(t)}).then(t=>t.json()).then(t=>this.jsonToDict(t)).then(i=>this.addDictionary(t,i)).then(()=>{this.requests.delete(t)}).catch(()=>{this.requests.delete(t)});return this.requests.set(t,i),this.requests.get(t)}}catch(i){}}async lazyloadRef(t,i,s=this.locale){try{const e=t.url.trim().replace(/^\//,"").replace(/\:locale/g,s);if(!e.endsWith(".json"))return void console.error(`Unable to lazyload "${i}" because it is not a .json file`);const o=`${this.src.replace(/\/$/,"")}/${e}`;if(this.requests.has(o))return this.requests.get(o);{const t=fetch(o).then(t=>t.json()).then(t=>this.appendToDictionary(s,i,t)).then(()=>{this.requests.delete(o)}).catch(()=>{this.requests.delete(o)});return this.requests.set(o,t),this.requests.get(s)}}catch(e){}}async resolvePhrase(t,i=this.locale){this.dicts.has(i)||await this.fetchDictionary(i);const s=this.dicts.get(i),[e,...o]=t.split(".").map(t=>t.trim()).filter(t=>t);if(s&&s.has(e)){const n=s.get(e);if("object"==typeof n&&n.lazy)return await this.lazyloadRef(n,e,i),this.resolvePhrase(t,i);if(o.length){let t=o.reduce((t,i)=>t[i],s.get(e));return"object"==typeof n&&"string"==typeof t&&t}return"string"==typeof n&&n}return console.error(`Unable to resolve phrase "${t}" for "${i}"`),!1}async jsonToDict(t){this.global||await this.fetchGlobal();const i=this.global?Object.entries(this.global):[],s=Object.entries(t);return new Map([...i,...s])}addMO(){"MutationObserver"in window&&(this.removeMO(),this.mo=new MutationObserver(t=>{"lang"===t[0].attributeName&&(this.locale=e.get()),"dir"===t[0].attributeName&&(this.dir=o.get())}),this.mo.observe(document.documentElement,{attributes:!0,attributeFilter:["lang","dir"]}))}removeMO(){this.mo&&(this.mo.disconnect(),this.mo=void 0)}async setDirFromDict(){if(this.requests.has(this.locale)&&await this.requests.get(this.locale),this.dicts.has(this.locale)){const t=this.dicts.get(this.locale).get("dir");t&&"string"==typeof t&&/ltr|rtl|auto/g.test(t)&&this.dir!==t&&o.set(t)}}get element(){return s(this)}static get watchers(){return{locale:["langChanged"],dir:["dirChanged"]}}static get style(){return":host{display:none}"}};export{n as intl_dictionary};