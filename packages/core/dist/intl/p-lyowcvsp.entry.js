import{r as t,g as e,h as s,c as i,H as r}from"./p-81aeffb6.js";const a=class{constructor(s){t(this,s),this.inGroup=!1,this.value="",this.error="",this.resolvedName="",this.lazy=!0,this.dict=e(this,"intl-dictionary")}async nameChanged(){await this.resolveName(),this.addIO()}replaceChanged(){switch(typeof this.replace){case"string":try{const t=JSON.parse(this.replace);this.replacements=new Map(Object.entries(t))}catch(t){throw new Error('Invalid value for "replace" in <intl-phrase>. "replace" must either be an object or a valid JSON string.')}break;case"object":this.replacements=new Map(Object.entries(this.replace));break;default:throw new Error('Invalid value for "replace" in <intl-phrase>. "replace" must either be an object or a valid JSON string.')}}langChangeHandler(){this.addIO()}async componentWillLoad(){this.addIO(),this.replace&&this.replaceChanged(),await this.resolveName()}componentWillUnload(){this.removeIO()}async resolveName(){return new Promise(t=>{const e=this.element.parentElement.closest("intl-phrase-group");e?(this.inGroup=!0,this.resolvedName=`${e.name}.${this.name}`,t()):(this.resolvedName=this.name,t())})}async resolveValue(){const{resolvedName:t,locale:e}=this,s=await this.dict.componentOnReady(),i=this.replaceValue(await s.resolvePhrase(t,e));!1!==i&&void 0!==i?this.value=i:this.error=this.name}replaceValue(t){return!1===t?t:t.replace(/{{\s*([^}}\s]*)\s*}}/g,(t,e)=>this.replacements.has(e)?this.replacements.get(e).toString():t)}addIO(){void 0!==this.name&&(this.lazy&&"IntersectionObserver"in window?(this.io=new IntersectionObserver(t=>{t[0].isIntersecting&&this.resolveValue().then(()=>{this.removeIO()})}),this.io.observe(this.element)):setTimeout(()=>this.resolveValue(),200))}removeIO(){this.io&&(this.io.disconnect(),this.io=void 0)}hostData(){return{style:{color:""!==this.error?"red":null}}}__stencil_render(){return this.value?s("ins",{style:{textDecoration:"inherit"},innerHTML:this.value}):this.error}get element(){return i(this)}static get watchers(){return{name:["nameChanged"],replace:["replaceChanged"]}}render(){return s(r,this.hostData(),this.__stencil_render())}};export{a as intl_phrase};